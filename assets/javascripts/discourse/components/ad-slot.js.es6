import AdComponent from "discourse/plugins/discourse-adplugin/discourse/components/ad-component";
import {
  default as computed,
  observes
} from "ember-addons/ember-computed-decorators";

const adConfig = Ember.Object.create({
  "google-adsense": {
    settingPrefix: "adsense", // settings follow naming convention
    enabledSetting: "adsense_publisher_code",
    nthPost: "adsense_nth_post_code"
  },
  "google-dfp-ad": {
    settingPrefix: "dfp", // settings follow naming convention
    enabledSetting: "dfp_publisher_id",
    nthPost: "dfp_nth_post_code"
  },
  "amazon-product-links": {
    settingPrefix: "amazon",
    enabledSetting: false,
    nthPost: "amazon_nth_post_code",
    desktop: {
      "topic-list-top": "amazon_topic_list_top_src_code",
      "post-bottom": "amazon_post_bottom_src_code",
      "topic-above-post-stream": "amazon_topic_above_post_stream_src_code",
      "topic-above-suggested": "amazon_topic_above_suggested_src_code"
    },
    mobile: {
      "topic-list-top": "amazon_mobile_topic_list_top_src_code",
      "post-bottom": "amazon_mobile_post_bottom_src_code",
      "topic-above-post-stream":
        "amazon_mobile_topic_above_post_stream_src_code",
      "topic-above-suggested": "amazon_mobile_topic_above_suggested_src_code"
    }
  },
  "codefund-ad": {
    settingPrefix: "codefund",
    enabledSetting: "codefund_property_id",
    nthPost: "codefund_nth_post",
    desktop: {
      "topic-list-top": "codefund_top_of_topic_list_enabled",
      "post-bottom": "codefund_below_post_enabled",
      "topic-above-post-stream": "codefund_above_post_stream_enabled",
      "topic-above-suggested": "codefund_above_suggested_enabled"
    }
  },
  "carbonads-ad": {
    settingPrefix: "carbonads",
    enabledSetting: "carbonads_serve_id",
    desktop: {
      "topic-list-top": "carbonads_topic_list_top_enabled",
      "post-bottom": false,
      "topic-above-post-stream": "carbonads_above_post_stream_enabled",
      "topic-above-suggested": false
    }
  }
});

const displayCounts = {
  houseAds: 0,
  allAds: 0
};

export default AdComponent.extend({
  needsUpdate: false,

  /**
   * For a given ad placement and optionally a post number if in between posts,
   * list all ad network names that are configured to show there.
   */
  @computed("placement", "postNumber")
  availableAdTypes(placement, postNumber) {

    let types = [];

var url = window.location.href;

if( url.indexOf("/t/") > -1) {
  var parameters = url.split("/");
  var topic_id = parseInt(parameters[5]);
  
  var blockedIDs = [11,529413,1163589,1077651,1077666,1077687,1077689,1077699,1077701,1077740,1077775,1077883,1077926,1077928,1078025,1078029,1078033,1078048,1078061,1078155,1078182,1078422,1079060,1079335,1100124,1100851,1102529,1102588,1102916,1109904,1110392,1111543,1112298,1113149,1113270,1116598,1117321,1118768,1119031,1122065,1122942,1123395,1124805,1125998,1126186,1134291,1137646,1138284,1138883,1141962,1141966,1141967,1142132,1143942,1145398,1151338,1152025,1152036,1152429,1152569,1153424,1156990,1157770,1158534,1160964,1161328,1161335,1161348,1161441,1161451,1161461,1161653,1161782,1162167,1162277,1162467,1162689,1162731,294363,294656,294999,295048,295216,295807,296478,296947,297183,297469,298624,298701,298776,298918,298939,299074,299092,299449,299468,299537,299592,299917,300650,300781,301052,301249,301286,301317,301973,302229,302715,302914,303428,303564,303672,303760,303908,303909,303961,304180,304349,304514,304545,304697,304926,305454,305499,305569,305623,306189,306211,306818,307207,307427,307805,308051,308080,308119,308831,309089,309508,310238,310239,310807,310956,311526,311622,311637,311660,311984,312365,312520,312841,313126,313136,313152,313210,313264,313298,314292,314510,314706,314969,315047,316067,316075,316221,316847,316889,316974,319434,319453,320120,320394,320430,320498,320738,320886,321361,321485,321603,321629,321780,321905,322819,323460,323541,323658,323923,324579,325605,325648,325658,325735,325784,326007,326155,326156,326506,326543,327295,327561,327718,328046,328090,328111,328201,328280,328850,329076,329302,329537,329591,329633,329826,329998,330063,330072,330089,330294,330485,330490,330628,330629,330631,330642,330715,330740,330809,330850,331011,331184,331234,331463,331705,331718,331743,331925,332076,332113,332231,332611,332747,332791,333279,333336,333555,334225,334242,334434,334594,334796,334866,334899,335020,335038,335051,335135,335222,335367,335374,335394,335580,335640,335789,335801,335848,335882,335888,335973,336292,336518,336646,337250,337406,337454,337501,337678,338235,338566,338611,338633,338907,339285,339387,339493,339494,339501,339508,339698,339944,340062,340407,340480,340724,340735,341373,341538,341736,341985,342444,342538,342654,342668,343413,343482,343579,343608,343868,344174,344205,344269,344436,344564,344638,344673,344763,344946,345244,345303,345348,346009,347099,347251,347399,347604,347844,348023,348083,348412,348413,348606,348684,348800,349053,349570,349651,349705,349745,350346,350424,350757,350791,351485,351675,352083,352131,352219,352530,352711,352726,352843,352859,354125,354299,354321,354702,354760,354843,354864,355200,355458,356578,356727,356935,357154,358264,358860,358864,359246,359292,359321,359424,359858,359859,359899,360203,360435,360918,361037,361295,361917,362372,362571,362955,363142,363210,363281,363377,364063,364420,365262,366090,366683,366957,367167,367256,367923,368123,368394,368803,368906,369170,369769,369984,371201,371473,371687,371750,371942,372383,372633,372826,372920,373201,373708,373942,374502,374518,374591,374606,375943,376448,376701,376844,376865,376946,377477,377891,377986,378268,378386,378575,378638,378827,378864,378866,378874,379056,379291,379361,379618,379894,380464,380621,380677,380954,380965,381183,381794,382371,383072,383223,383424,383847,384273,384282,384897,385023,385871,386267,386949,387685,387737,388354,388532,388877,388960,389034,389061,389073,389176,389482,389580,389635,389883,390442,390512,390513,390750,390988,391042,391223,391553,391561,391614,391617,391796,391802,391914,392293,392541,392788,393215,393461,393549,393624,394291,394782,394954,395027,395029,395310,395601,395916,395955,396643,397177,397186,398006,398755,399145,399586,400509,401628,401936,402011,402242,402873,403460,403945,404435,404752,404760,405364,405425,405992,406257,406549,407481,407511,407963,408681,409155,409177,409224,409345,409441,409692,409694,409830,409939,409951,410359,410783,411026,411188,411647,411685,411688,412380,412381,412530,412900,413302,413498,413760,413849,413910,414016,414228,414384,415205,415494,415823,416294,416373,416883,417221,417631,417649,417936,417955,417996,418596,419877,419881,420315,420946,422079,422762,423008,423169,423903,424009,424032,424201,424472,424744,424763,424838,425080,425454,425903,425983,426481,426788,427309,427358,427550,427912,427956,428249,428436,428895,429282,429358,429359,429377,429397,429504,429527,429557,429566,429570,429732,429872,429932,429938,429943,430073,430076,430372,430391,430392,430700,430886,431821,431864,431907,431999,432037,432129,432605,432822,432846,432924,433104,433109,433116,433564,433590,433921,434080,434423,434432,434560,434823,435504,435725,435846,435847,436417,437100,437123,437190,437249,437574,437613,437900,438272,438718,438843,438906,439053,439139,439152,439159,439746,439790,439791,440022,440026,440177,440304,440385,440533,440841,441197,441351,441436,442163,442220,442703,442736,443762,444307,444308,444502,444784,444858,445566,445758,445825,446109,446471,446487,446560,446602,447487,447664,447847,448017,448357,448413,448543,449400,450006,451312,451418,451987,452159,453297,453319,453366,453640,453815,454202,454311,454483,454592,454992,455162,455353,455727,456053,456183,456428,456488,456659,457403,457539,457630,458083,459185,459395,459447,459540,459682,459898,459963,460647,461569,461616,462411,463074,463409,463665,464257,464503,465135,465598,465600,465601,465995,466026,466266,466489,466858,467337,467917,468176,468848,469253,469341,469757,469902,470139,470611,471052,471101,471645,471793,471898,471938,471939,471943,472062,474177,474331,474588,475006,475218,475738,476074,476112,476837,476895,476945,476988,477929,478956,479331,479844,479934,480224,480772,480881,481130,481168,481308,481614,481826,482052,482264,482343,482407,482679,482978,483238,485955,486148,487135,487363,488418,488955,489300,489333,489457,489566,489730,490406,491112,491125,491228,491327,492357,492796,493005,493112,493335,493350,493369,493574,493612,494236,494673,494913,495014,495226,495516,495727,496266,496732,496890,497128,497607,498004,498749,500064,501327,502403,502616,504101,504234,504350,504616,505056,505150,505154,505257,505373,505561,505869,505891,506877,509577,509976,510390,510916,510938,511329,511339,511412,511580,512965,513925,514263,514460,514867,514992,515030,515183,515999,517108,517957,518558,519257,519284,519720,520230,520839,521598,521650,521655,523003,523942,523948,525289,525430,525706,526306,527332,527894,527948,528309,528887,528972,529243,529379,530260,530703,530974,531299,532350,532961,533248,533676,533871,534888,535890,536434,537179,537323,537927,538734,540507,542592,542640,542918,543110,543256,543336,543673,543821,543828,544815,547077,548019,548028,548169,548377,549802,550020,550302,550781,551426,552547,552856,552913,553524,554346,556006,556109,556721,557053,558581,559086,559154,559775,559889,559910,560246,560963,561203,561319,561533,561705,562552,563311,563917,564241,564861,565313,565468,565926,566588,567958,568515,568516,568923,569806,570164,570194,570607,571049,573183,574283,574388,575581,575744,575852,576280,576315,577036,577401,577585,578269,578936,578938,579368,579570,579690,580247,580774,580860,580862,580927,581180,582706,582935,582961,583995,585259,587010,587796,587849,588349,589340,589451,589488,592704,592980,594219,594296,595034,595520,596304,596974,597558,598445,599816,600135,600783,601049,601447,602469,603212,603283,604526,604726,605833,606543,607389,609346,609401,611134,611696,611858,611924,612608,613496,614111,614112,614303,614304,615415,616147,616411,616412,617011,617044,617418,618019,618078,620277,621570,621728,624208,624209,624957,625027,625339,625764,625906,627407,628234,628786,628870,630333,631073,634576,635162,635809,635881,636097,636291,636380,636406,636407,638301,638350,638702,638703,638801,641393,641742,641815,642131,642867,644082,645707,645953,645967,648725,648925,649349,649378,650009,650134,650274,650504,653256,654226,654837,655068,655414,655510,655597,656459,657298,657360,658975,660517,660672,661050,661986,662679,663323,663746,663981,665378,666381,668159,668273,669217,669763,670326,670522,670728,671007,671233,671309,671446,671460,672759,672776,673085,673171,673230,673276,673417,673524,673884,674081,674324,675138,675209,675313,676278,676328,677686,677718,678982,679361,680889,680990,682853,683195,683404,685054,686650,688872,689430,690707,690708,692327,692803,692817,694338,694961,695628,696341,698154,698257,700758,700933,701371,701733,701970,701990,702097,713766,713850,722314,722507,725710,725725,787471,787544,794091,794333,795358,861643,885854,885883,955580,955591,955798,971475,972627];

  if( blockedIDs.includes(topic_id)){
    console.log('no ads');
      return types;
  }

}



    const houseAds = this.site.get("house_creatives"),
      placeUnderscored = placement.replace(/-/g, "_");

    if (houseAds && houseAds.settings) {
      const adsForSlot = houseAds.settings[placeUnderscored];

      if (
        Object.keys(houseAds.creatives).length > 0 &&
        !Ember.isBlank(adsForSlot) &&
        (!postNumber ||
          this.isNthPost(parseInt(houseAds.settings.after_nth_post, 10)))
      ) {
        types.push("house-ad");
      }
    }

    Object.keys(adConfig).forEach(adNetwork => {
      const config = adConfig[adNetwork];
      let settingNames = null,
        name;

      if (
        config.enabledSetting &&
        !Ember.isBlank(this.siteSettings[config.enabledSetting]) &&
        (!postNumber ||
          !config.nthPost ||
          this.isNthPost(parseInt(this.siteSettings[config.nthPost], 10)))
      ) {
        if (this.site.mobileView) {
          settingNames = config.mobile || config.desktop;
        } else {
          settingNames = config.desktop;
        }

        if (settingNames) {
          name = settingNames[placement];
        }

        if (name === undefined) {
          // follows naming convention: prefix_(mobile_)_{placement}_code
          name = `${config.settingPrefix}_${
            this.site.mobileView ? "mobile_" : ""
          }${placeUnderscored}_code`;
        }

        if (name !== false && !Ember.isBlank(this.siteSettings[name])) {
          types.push(adNetwork);
        }
      }
    });

    return types;
  },

  /**
   * When house ads are configured to alternate with other ad networks, we
   * need to trigger an update of which ad component is shown after
   * navigating between topic lists or topics.
   */
  @observes("refreshOnChange")
  changed() {
    if (this.get("listLoading")) {
      return;
    }

    // force adComponents to be recomputed
    this.notifyPropertyChange("needsUpdate");
  },

  /**
   * Returns a list of the names of ad components that should be rendered
   * in the given ad placement. It handles alternating between house ads
   * and other ad networks.
   */
  @computed("placement", "availableAdTypes", "needsUpdate")
  adComponents(placement, availableAdTypes) {
    if (
      !availableAdTypes.includes("house-ad") ||
      availableAdTypes.length === 1
    ) {
      // Current behaviour is to allow multiple ads from different networks
      // to show in the same place. We could change this to choose one somehow.
      return availableAdTypes;
    }

    const houseAds = this.site.get("house_creatives");
    let houseAdsSkipped = false;

    if (houseAds.settings.house_ads_frequency === 100) {
      // house always wins
      return ["house-ad"];
    } else if (houseAds.settings.house_ads_frequency > 0) {
      // show house ads the given percent of the time
      if (
        displayCounts.allAds === 0 ||
        (100 * displayCounts.houseAds) / displayCounts.allAds <
          houseAds.settings.house_ads_frequency
      ) {
        displayCounts.houseAds += 1;
        displayCounts.allAds += 1;
        return ["house-ad"];
      } else {
        houseAdsSkipped = true;
      }
    }

    const networkNames = availableAdTypes.filter(x => x !== "house-ad");

    if (houseAdsSkipped) {
      displayCounts.allAds += networkNames.length;
    }

    return networkNames;
  }
});
